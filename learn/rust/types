
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">

    <!-- Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-171431390-1"></script>
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-SPY7S5B91F"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());

      gtag('config', 'UA-171431390-1');
    </script>

    <!-- Base File Includes -->
    
    

    <!-- Includes -->
    
    <!-- Code highlighting
        To Use: <pre><code class="language-python">print('Hello World')</code></pre>
    -->
    <link rel="stylesheet" href="/static/home/packages/highlightjs/dracula.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.4.0/highlight.min.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>
    <!-- LaTeX input. Use \(...\) for inline mathematics and $$...$$ or \[...\] for block equations -->
	<script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
	<script type="text/javascript" id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>


    <!-- Title -->
    <title>
            DRC
        
    - Learn Rust - Types

    </title>
    <!-- ### Bootstrap Files ### -->
    <!-- Fit device screen size -->
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
    <!-- ### END BOOTSTRAP FILES ### -->
	
	<!-- Font Awesome 4 -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

    <!-- Load Custom Bootstrap CSS -->
    <link rel="stylesheet" type="text/css" href="/static/home/bootstrap.css">

    <!-- Favicon -->
    <link rel="shortcut icon" type="image/png" href="/static/home/images/favicon.ico">

    <!-- Hide/Reveal Navbar Upon Scrolling -->
    <script src="/static/home/js/navbar_show.js" async></script>
    <link rel="stylesheet" type="text/css" href="/static/home/css/navbar.css">

    <!-- Javascript to run after the page has loaded -->
    <script src="/static/home/js/on_page_load.js" defer></script>
    
</head>

<!-- Body -->
<body class='bg-light'>
    <!-- Navigation Bar -->
    <header class="nav-down">
        <nav class="navbar py-0 navbar-expand-md navbar-dark bg-dark">
    <!-- Website Brand Icon -->
    <a class="navbar-brand" href="/">DRC</a>
    <!-- Menu Button when screen is small -->
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>

    <!-- Navigation Buttons -->
    <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav mr-auto">
            <!-- Home -->
            <li class="nav-item dropdown">
                <!-- Screen Reader -->
                
                <div class="btn-group ">
                    <a class="nav-link btn btn-dark pr-1" href="/">Home</a>
                </div>
            </li>
            <!-- Experience -->
            <li class="nav-item dropdown">
                <!-- Screen Reader -->
                
                <!-- Experience Types -->
                <div class="btn-group ">
                    <a class="nav-link btn btn-dark pr-1" href="/resume/">Experience</a>
                    <button type="button" class="btn btn-dark px-1 dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <span class="sr-only">Toggle Dropdown</span>
                    </button>
                    <div class="dropdown-menu py-0 bg-secondary">
                        <a class="dropdown-item" href="/resume/">&#8226; Resume</a>
                        <a class="dropdown-item text-white" href="/work-experience/">&#8226; Work Experience</a>
                        <!-- <a class="dropdown-item text-white" href="/computer-skills/">&#8226; Computer Skills</a> -->
                    </div>
                </div>
            </li>
 
            <!-- Blog Posts -->
<!--            <li class="nav-item dropdown">
                
                <div class="btn-group ">
                    <a class="nav-link btn btn-dark pr-1" href="/blog/">Blog</a>
                    <button type="button" class="btn btn-dark px-1 dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <span class="sr-only">Toggle Dropdown</span>
                    </button>
                    <div class="dropdown-menu py-0 bg-secondary">
                        <a class="dropdown-item" href="/blog/project/">&#8226; Projects</a>
                        <a class="dropdown-item" href="/blog/tutorial/">&#8226; Tutorials</a>
                        <a class="dropdown-item" href="#">&#8226; Other</a>
                    </div>
                </div>
            </li>
-->        
            <!-- Research -->
            <li class="nav-item dropdown">
                <!-- Screen Reader -->
                
                <!-- Experience Types -->
                <div class="btn-group ">
                    <a class="nav-link btn btn-dark pr-1" href="/research/">Research</a>
                    <button type="button" class="btn btn-dark px-1 dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <span class="sr-only">Toggle Dropdown</span>
                    </button>
                    <div class="dropdown-menu active py-0 bg-secondary">
                        <a class="dropdown-item" href="/research/papers/">&#8226; Papers</a>
                        <a class="dropdown-item" href="/research/projects/">&#8226; Projects</a>
                        <a class="dropdown-item" href="/research/notes/">&#8226; Notes</a>
                    </div>
                </div>
            </li>
            <!-- Learn -->
            <li class="nav-item dropdown">
                
                <div class="btn-group ">
                    <a class="nav-link btn btn-dark pr-1" href="/learn/">Learn</a>
                </div>
            </li>
            <!-- Projects -->
            <li class="nav-item dropdown">
                
                <div class="btn-group ">
                    <a class="nav-link btn btn-dark pr-1" href="/projects/">Projects</a>
                </div>
            </li>
            <!-- Write-Ups -->
            <li class="nav-item dropdown">
                
                <div class="btn-group ">
                    <a class="nav-link btn btn-dark pr-1" href="/writeups/kattis/">Write-Ups</a>
                </div>
            </li>
            <!-- About -->
            <li class="nav-item dropdown">
                <!-- Screen Reader -->
                
                <div class="btn-group ">
                    <a class="nav-link btn btn-dark pr-1" href="/about/">About</a>
                </div>
            </li>
            <!-- Contact -->
            <li class="nav-item dropdown">
                <!-- Screen Reader -->
                
                <div class="btn-group ">
                    <a class="nav-link btn btn-dark pr-1" href="/contact/">Contact</a>
                </div>
            </li>
        </ul>
        <!-- Search  bar -->
        <form class="form-inline my-1" action="/search/">
            <input class="form-control mr-0" style="font-size:14px; width:85%;" type="search" placeholder="Search" aria-label="Search" name="q" autocomplete="on">
            <button type="submit" style="width:15%; background-color: Transparent; border-color: Transparent;">
                <i class="fa fa-search" style="font-size:18px; color:#FFFFFF;"></i>
            </button>
        </form>
    </div>
</nav>

    </header>

    <!-- Content -->
    <div style="margin-top:60px;">
        <div class="container rounded m-4 mx-auto p-4 bg-white shadow-lg">
            
<div class="row">
    <!-- Scroll Bar -->
    <div class="d-none d-xl-block col-xl-2 overflow-auto" style="position:relative; overflow-y:scroll; height:80vh">
        <div id="side-navbar" class="list-group flex-xl-column flex-row">
            <center>
                <a class="list-group-item list-group-item-action" href="#types">
                    Types
                </a>
            </center>
            
                <a class="list-group-item list-group-item-action" href="#compound-types">
                    Compound Types
                </a>
            
                <a class="list-group-item list-group-item-action" href="#never-type">
                    Never Type
                </a>
            
                <a class="list-group-item list-group-item-action" href="#scalar-types">
                    Scalar Types
                </a>
            
                <a class="list-group-item list-group-item-action" href="#slice">
                    Slice
                </a>
            
                <a class="list-group-item list-group-item-action" href="#strings">
                    Strings
                </a>
            
                <a class="list-group-item list-group-item-action" href="#type">
                    Type
                </a>
            
        </div>
    </div>
   <!-- Content -->
   <div class="col" data-spy="scroll" data-target="#side-navbar" class="scrollspy" style="position:relative; overflow-y:scroll; height:80vh">
       <!-- Subject Information -->
       <div class="d-flex justify-content-between">
           <a href="/learn/rust/"><button type="button" class="btn btn-light">Back</button></a>
           <h1 id='types'>
               Rust - Types
           </h1>
           <br/>
       </div>
        
        <!-- For each topic -->
        
            <!-- Topic header -->
            <h2 id="compound-types"><a href="/learn/rust/types/compound-types">Compound Types</a></h2>
            <!-- Include topic -->
            <p>Compound types combine multiple values into a single type. Rust has two primitive compound types: tuples and arrays.</p>

<h6 style="text-align:center">The Tuple Type</h6>
<p>Tuples have a fixed length and can contain different types.</p>
<pre class="rounded"><code class="rust">fn main() {
    let tup = (10, 1_234, 5678, 12.4, true, 'a');
    let tup : (i32, i32, i32, f64, bool, char) = tup;

    // Destruct tup through pattern matching
    let (a, b, c, d, e, f) = tup;
    println!("{}, {}, {}, {}, {}, {}", a, b, c, d, e, f);

    // Destruct tup through indexing
    let ten = tup.0;
    let c = tup.5;
    println!("{}, {}", ten, c);

    // Return multiple values using a tuple
    let s1 = String::from("Daltie");
    let (s2, len) = find_length(s1);
    println!("The length of '{}' is {}.", s2, len);
}

// Multiple values can be returned from a function using tuples
fn find_length(s: String) -&gt; (String, usize) {
    let length = s.len();
    (s, length)
}</code></pre>



<h6 style="text-align:center">The Array Type</h6>
<p>Arrays are of FIXED length and all elements must be of the same type. See vector in the standard library for a variable length container.</p>
<p>Array data is allocated on the stack rather than the heap (speedy!).</p>
<pre class="rounded"><code class="rust">fn main() {
    // Array Declaration
    let a = [-1, 2, 3, 4, 5];
    let a: [i32; 5] = [1, 2, 3, 4, 5]; // i32 is the type, 5 is the length
    let a = [3; 5]; // [3, 3, 3, 3, 3]

    // Indexing
    let first = a[0];
    let second = a[1];

    // Out of Bounds Runtime error
    let will_panic = a[12]; // Rust will panic and crash instead of trying to access invalid memory
}</code></pre>

        
            <!-- Topic header -->
            <h2 id="never-type"><a href="/learn/rust/types/never-type">Never Type</a></h2>
            <!-- Include topic -->
            <p>If a function will never return use the never return type <code>!</code>.</p>

<pre><code class="rust">fn foo() -&gt; ! {}</code></pre>

<p>Some things that return the never type are <code>continue</code> and <code>panic!</code>.</p>

        
            <!-- Topic header -->
            <h2 id="scalar-types"><a href="/learn/rust/types/scalar-types">Scalar Types</a></h2>
            <!-- Include topic -->
            <p>Rust has four primary scalar types:</p>
<ul>
    <li>Integers</li>
    <li>Floating-Point Numbers</li>
    <li>Booleans</li>
    <li>Characters</li>
</ul>

<h6 style="text-align:center">Integer Types</h6>
<table class="table">
    <caption>Integer Types</caption>
    <thead>
        <tr>
            <th scope="col">Length</th>
            <th scope="col">Signed</th>
            <th scope="col">Unsigned</th>
        </tr>
    </thead>
    <tbody>
        <tr> <td>8-bit</td> <td><code>i8</code></td> <td><code>u8</code></td></tr>
        <tr> <td>16-bit</td> <td><code>i16</code></td> <td><code>u16</code></td></tr>
        <tr> <td>32-bit</td> <td><code>i32</code></td> <td><code>u32</code></td></tr>
        <tr> <td>64-bit</td> <td><code>i64</code></td> <td><code>u64</code></td></tr>
        <tr> <td>128-bit</td> <td><code>i128</code></td> <td><code>u128</code></td></tr>
        <tr> <td>arch*</td> <td><code>isize</code></td> <td><code>usize</code></td></tr>
    </tbody>
</table>
<p>The "arch" length is system architecture dependent.</p>

<table class="table">
    <caption>Integer Literals</caption>
    <thead>
        <tr>
            <th scope="col">Number Literals</th>
            <th scope="col">Example</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Decimal</td><td><code>12_345_678</code></td></tr>
        <tr><td>Hex</td><td><code>0xfe</code></td></tr>
        <tr><td>Octal</td><td><code>0o76</code></td></tr>
        <tr><td>Binary</td><td><code>0b1111_0000</code></td></tr>
        <tr><td>Byte (<code>u8</code> only)</td><td><code>b'A'</code></td></tr>
    </tbody>
</table>

<h6 style="text-align:center">Floating-Point Types</h6>
<table class="table">
    <caption>Floating-Point Types</caption>
    <thead>
        <tr>
            <th scope="col">Length</th>
            <th scope="col">Type</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>32-bit</td><td><code>f32</code></td></tr>
        <tr><td>64-bit</td><td><code>f64</code></td></tr>
    </tbody>
</table>
<p>Note: Rust defaults all floats to <code>f64</code>.</p>


<h6 style="text-align:center">The Boolean Type</h6>
<p>A boolean in Rust is either <code>true</code> or <code>false</code> and takes up one byte. The type is specified with <code>bool</code>.</p>


<h6 style="text-align:center">The Character Type</h6>
<p>The character type in Rust is a four byte Unicode Scalar Value. For example:</p>
<pre class="rounded"><code class="rust">fn main() {
    let c = 'z';
    let z = 'ℤ';
    let laughing_crying_face = '&#128514;';
}</code></pre>

        
            <!-- Topic header -->
            <h2 id="slice"><a href="/learn/rust/types/slice">Slice</a></h2>
            <!-- Include topic -->
            <p>A slice is a contiguous sequence of elements in a collection. The advantages of slices is they allow you to <i>borrow</i> part of a collection, such as a String or array. This is safe borrowing, if part of the original data is altered, the borrowed data is no longer valid.</p>

<h6>String Slice</h6>
<pre class="rounded"><code class="rust">fn main() {
    let mut name = String::from("Daltie Cole");

    let f_name = first_name(&name[..]); // Let first_name() borrow name. Pass as a string literal

    //name.clear(); // Clear out the name

    // If name was cleared, this line would not compile
    println!("First name: {}", f_name);

    // Other slicing fun
    let daltie = &name[..7];
    let cole = &name[8..];
    let full_name = &name[..];
}

// By using &str as the parameter type instead of &String, string literals can be passed as well
fn first_name(name: &str) -&gt; &str {
    // Convert name into an array of bytes
    let bytes = name.as_bytes();

    // .iter() creates an iterator over the array
    // .enumerate() wraps iter() into a series of tuples where
    //   the first element is the index and the second is the item
    for (i, &item) in bytes.iter().enumerate() {
        // If the element is a binary space
        if item == b' ' {
            // Return the slice from the beginning to the current point
            return &name[0..i];
        }
    }

    &name[..]
}</code></pre>

        
            <!-- Topic header -->
            <h2 id="strings"><a href="/learn/rust/types/strings">Strings</a></h2>
            <!-- Include topic -->
            <h6>Contains</h6>
<p>Returns true if a string contains a substring:</p>
<pre><code class="rust">if s.contains("apple") {}</code></pre>

<h6>Lines</h6>
<p>Iterate though each line in a string:</p>
<pre><code class="rust">for line in s.lines() {}</code></pre>

<h6>Lowercase</h6>
<p>Creates a new string containing the lowercase letters of the old string:</p>
<pre><code class="rust">s.to_lowercase();</code></pre>

<h6>Binary Strings</h6>
<p>Use <code>b""</code> to create a binary string.</p>

        
            <!-- Topic header -->
            <h2 id="type"><a href="/learn/rust/types/type">Type</a></h2>
            <!-- Include topic -->
            <p>The <code>type</code> keyword is similar to <code>typedef</code> in C++, a type becomes aliased as another type.</p>

<pre><code class="rust">// Simple Example
type Meters = i32;
let x: i32 = 2;
let y: Meters = 5;
let z = x + y;

// Can be used with templates
type Result&gt;T&lt; = std::result::Result&gt;T, std::io::Error&lt;
</code></pre>

        
    </div>
</div>

        </div>
    </div>

    <!-- Footer -->
    <footer class="small text-center text-muted">
        <!-- Social Links -->
		<p>
            <a href="https://github.com/DaltonCole" target="_blank" class="fa fa-github" style="font-size:28px;color:black;"></a>
            &nbsp;&nbsp;&nbsp;&nbsp;
            <a href="https://www.linkedin.com/in/daltoncole1/" target="_blank" class="fa fa-linkedin" style="font-size:28px;color:#2867B2;"></a>
        </p>

        <!-- Copyright -->
        
        <p class="copyright"> Copyright &copy; 2020 
            -2024 
         | Dalton Russell Cole</p>

        <!-- Extra Footer Block -->
        
        
    </footer>
</body>
</html>
