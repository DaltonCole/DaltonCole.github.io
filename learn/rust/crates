
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">

    <!-- Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-171431390-1"></script>
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-SPY7S5B91F"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());

      gtag('config', 'UA-171431390-1');
    </script>

    <!-- Base File Includes -->
    
    

    <!-- Includes -->
    
    <!-- Code highlighting
        To Use: <pre><code class="language-python">print('Hello World')</code></pre>
    -->
    <link rel="stylesheet" href="/static/home/packages/highlightjs/dracula.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.4.0/highlight.min.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>
    <!-- LaTeX input. Use \(...\) for inline mathematics and $$...$$ or \[...\] for block equations -->
	<script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
	<script type="text/javascript" id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>


    <!-- Title -->
    <title>
            DRC
        
    - Learn Rust - Crates

    </title>
    <!-- ### Bootstrap Files ### -->
    <!-- Fit device screen size -->
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
    <!-- ### END BOOTSTRAP FILES ### -->
	
	<!-- Font Awesome 4 -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

    <!-- Load Custom Bootstrap CSS -->
    <link rel="stylesheet" type="text/css" href="/static/home/bootstrap.css">

    <!-- Favicon -->
    <link rel="shortcut icon" type="image/png" href="/static/home/images/favicon.ico">

    <!-- Hide/Reveal Navbar Upon Scrolling -->
    <script src="/static/home/js/navbar_show.js" async></script>
    <link rel="stylesheet" type="text/css" href="/static/home/css/navbar.css">

    <!-- Javascript to run after the page has loaded -->
    <script src="/static/home/js/on_page_load.js" defer></script>
    
</head>

<!-- Body -->
<body class='bg-light'>
    <!-- Navigation Bar -->
    <header class="nav-down">
        <nav class="navbar py-0 navbar-expand-md navbar-dark bg-dark">
    <!-- Website Brand Icon -->
    <a class="navbar-brand" href="/">DRC</a>
    <!-- Menu Button when screen is small -->
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>

    <!-- Navigation Buttons -->
    <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav mr-auto">
            <!-- Home -->
            <li class="nav-item dropdown">
                <!-- Screen Reader -->
                
                <div class="btn-group ">
                    <a class="nav-link btn btn-dark pr-1" href="/">Home</a>
                </div>
            </li>
            <!-- Experience -->
            <li class="nav-item dropdown">
                <!-- Screen Reader -->
                
                <!-- Experience Types -->
                <div class="btn-group ">
                    <a class="nav-link btn btn-dark pr-1" href="/resume/">Experience</a>
                    <button type="button" class="btn btn-dark px-1 dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <span class="sr-only">Toggle Dropdown</span>
                    </button>
                    <div class="dropdown-menu py-0 bg-secondary">
                        <a class="dropdown-item" href="/resume/">&#8226; Resume</a>
                        <a class="dropdown-item text-white" href="/work-experience/">&#8226; Work Experience</a>
                        <!-- <a class="dropdown-item text-white" href="/computer-skills/">&#8226; Computer Skills</a> -->
                    </div>
                </div>
            </li>
 
            <!-- Blog Posts -->
<!--            <li class="nav-item dropdown">
                
                <div class="btn-group ">
                    <a class="nav-link btn btn-dark pr-1" href="/blog/">Blog</a>
                    <button type="button" class="btn btn-dark px-1 dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <span class="sr-only">Toggle Dropdown</span>
                    </button>
                    <div class="dropdown-menu py-0 bg-secondary">
                        <a class="dropdown-item" href="/blog/project/">&#8226; Projects</a>
                        <a class="dropdown-item" href="/blog/tutorial/">&#8226; Tutorials</a>
                        <a class="dropdown-item" href="#">&#8226; Other</a>
                    </div>
                </div>
            </li>
-->        
            <!-- Research -->
            <li class="nav-item dropdown">
                <!-- Screen Reader -->
                
                <!-- Experience Types -->
                <div class="btn-group ">
                    <a class="nav-link btn btn-dark pr-1" href="/research/">Research</a>
                    <button type="button" class="btn btn-dark px-1 dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <span class="sr-only">Toggle Dropdown</span>
                    </button>
                    <div class="dropdown-menu active py-0 bg-secondary">
                        <a class="dropdown-item" href="/research/papers/">&#8226; Papers</a>
                        <a class="dropdown-item" href="/research/projects/">&#8226; Projects</a>
                        <a class="dropdown-item" href="/research/notes/">&#8226; Notes</a>
                    </div>
                </div>
            </li>
            <!-- Learn -->
            <li class="nav-item dropdown">
                
                <div class="btn-group ">
                    <a class="nav-link btn btn-dark pr-1" href="/learn/">Learn</a>
                </div>
            </li>
            <!-- Projects -->
            <li class="nav-item dropdown">
                
                <div class="btn-group ">
                    <a class="nav-link btn btn-dark pr-1" href="/projects/">Projects</a>
                </div>
            </li>
            <!-- Write-Ups -->
            <li class="nav-item dropdown">
                
                <div class="btn-group ">
                    <a class="nav-link btn btn-dark pr-1" href="/writeups/kattis/">Write-Ups</a>
                </div>
            </li>
            <!-- About -->
            <li class="nav-item dropdown">
                <!-- Screen Reader -->
                
                <div class="btn-group ">
                    <a class="nav-link btn btn-dark pr-1" href="/about/">About</a>
                </div>
            </li>
            <!-- Contact -->
            <li class="nav-item dropdown">
                <!-- Screen Reader -->
                
                <div class="btn-group ">
                    <a class="nav-link btn btn-dark pr-1" href="/contact/">Contact</a>
                </div>
            </li>
        </ul>
        <!-- Search  bar -->
        <form class="form-inline my-1" action="/search/">
            <input class="form-control mr-0" style="font-size:14px; width:85%;" type="search" placeholder="Search" aria-label="Search" name="q" autocomplete="on">
            <button type="submit" style="width:15%; background-color: Transparent; border-color: Transparent;">
                <i class="fa fa-search" style="font-size:18px; color:#FFFFFF;"></i>
            </button>
        </form>
    </div>
</nav>

    </header>

    <!-- Content -->
    <div style="margin-top:60px;">
        <div class="container rounded m-4 mx-auto p-4 bg-white shadow-lg">
            
<div class="row">
    <!-- Scroll Bar -->
    <div class="d-none d-xl-block col-xl-2 overflow-auto" style="position:relative; overflow-y:scroll; height:80vh">
        <div id="side-navbar" class="list-group flex-xl-column flex-row">
            <center>
                <a class="list-group-item list-group-item-action" href="#crates">
                    Crates
                </a>
            </center>
            
                <a class="list-group-item list-group-item-action" href="#binary">
                    Binary
                </a>
            
                <a class="list-group-item list-group-item-action" href="#library">
                    Library
                </a>
            
                <a class="list-group-item list-group-item-action" href="#module">
                    Module
                </a>
            
                <a class="list-group-item list-group-item-action" href="#multiple-files">
                    Multiple Files
                </a>
            
                <a class="list-group-item list-group-item-action" href="#package">
                    Package
                </a>
            
                <a class="list-group-item list-group-item-action" href="#paths">
                    Paths
                </a>
            
                <a class="list-group-item list-group-item-action" href="#public">
                    Public
                </a>
            
                <a class="list-group-item list-group-item-action" href="#use">
                    Use
                </a>
            
                <a class="list-group-item list-group-item-action" href="#workspaces">
                    Workspaces
                </a>
            
        </div>
    </div>
   <!-- Content -->
   <div class="col" data-spy="scroll" data-target="#side-navbar" class="scrollspy" style="position:relative; overflow-y:scroll; height:80vh">
       <!-- Subject Information -->
       <div class="d-flex justify-content-between">
           <a href="/learn/rust/"><button type="button" class="btn btn-light">Back</button></a>
           <h1 id='crates'>
               Rust - Crates
           </h1>
           <br/>
       </div>
        
        <!-- For each topic -->
        
            <!-- Topic header -->
            <h2 id="binary"><a href="/learn/rust/crates/binary">Binary</a></h2>
            <!-- Include topic -->
            <p>A package can have any number of binary crates</p>

<p><code>src/main.rs</code> is the default crate root for a binary crate with the same name as the package. To add multiple binary crates, place files in the <code>src/bin/</code> directory. Each file will be a separate binary crate.</p>

        
            <!-- Topic header -->
            <h2 id="library"><a href="/learn/rust/crates/library">Library</a></h2>
            <!-- Include topic -->
            <p>A package can only have one (or none) library crates.</p>

<p>If a package directory contains <code>src/lib.rs</code>, the package contains a library crate with the same name as the package with <code>src/lib.rs</code> being the crate root. If both <code>src/lib.rs</code> and <code>src/main.rs</code> exist, then the package has two crates</p>

        
            <!-- Topic header -->
            <h2 id="module"><a href="/learn/rust/crates/module">Module</a></h2>
            <!-- Include topic -->
            <p>Modules are used to organize code within a crate into groups and control the privacy of items (public vs private). The C++ counterpart would be a namespace, except Rust takes it a step further.</p>

<p>Modules are created by using the <code>mod</code> keyword.</p>

<p>The modules in <code>src/main.rs</code> and <code>src/lib.rs</code> are called "crate roots" and is nested under <code>crate</code>.</p>

<p>Modules are private by default (like C++ private methods in a class). To make them public, you have to add the <code>pub</code> keyword. All parents of that module are now public, but children are still private unless specified otherwise.<code>pub</code> can be used on structs, enums, functions, and methods as well.</p>

<p>The keyword <code>super</code> allows you to refer to something in the parent's scope.</p>


<p>Example:</p>
<pre class="rounded"><code class="rust">mod garden {
    // Nest a module inside of another
    pub mod food {
        // Add structs, enums, constants, traits, modules, functions, etc. here
        pub fn harvest() {
            super::soil::amount();
            super::super::plant_garden();
        }
        fn water() {}
    }

    pub mod soil {
        pub fn quality() {}
    
        pub fn amount() { quality(); }
    }
}

pub fn plant_garden() {
    // Relative path
    garden::soil::quality();
    // Absolute path
    crate::garden::soil::amount();
}

fn main() {
    // To access harvest, you'll have to do:
    crate::garden::food::harvest();
    // Both food and harvest must be marked as pub
}
</code></pre>


        
            <!-- Topic header -->
            <h2 id="multiple-files"><a href="/learn/rust/crates/multiple-files">Multiple Files</a></h2>
            <!-- Include topic -->
            <p>Multiple files example:</p>
<pre class="rounded"><code class="rust">// src/garden.rs
pub mod food;

// src/garden/food.rs
pub fn harvest() {}

// src/main.rs
mod garden;

pub use crate::garden::food;

fn main() {
    food::harvest();
}
</code></pre>

        
            <!-- Topic header -->
            <h2 id="package"><a href="/learn/rust/crates/package">Package</a></h2>
            <!-- Include topic -->
            <p>A package is one or more crates that provide a some functionality. A package contains a <i>Cargo.toml</i> file which describes how to build the crates.</p>

<p>A package can contain as many binary crates as desired but can only contain a maximum of one library crate. A package must contain at least one crate (either library or binary).</p>

        
            <!-- Topic header -->
            <h2 id="paths"><a href="/learn/rust/crates/paths">Paths</a></h2>
            <!-- Include topic -->
            <p>To use a module tree, you'll need the path of the module. The path can be:</p>
<ul>
    <li><code>Absolute path</code>: Starts at the crate root</li>
    <li><code>Relative path</code>: Starts from the current module. Uses <code>self</code>, <code>super</code>, or an identifier in the current module.</li>
</ul>

<p>Which path method used in a module depends on how the module will be used. Absolute paths are generally recommended.</p>

<p><code>::</code> separate each identifier in a path (like C++ namespaces).</p>

        
            <!-- Topic header -->
            <h2 id="public"><a href="/learn/rust/crates/public">Public</a></h2>
            <!-- Include topic -->
            <p>The keyword <code>pub</code> makes something public, like a function, module, enum, struct etc.</p>

<p>However, structs are special.
<code>pub</code> in front of them just makes them public, not the members inside. The members will not be read nor writable. To make them read/writable, add the <code>pub</code> keyword to the variable itself.</p>

<p>Example:</p>
<pre class="rounded"><code class="rust">mod house {
    pub struct Kitchen {
        pub plates: i32,
        sinks: i8,
    }

    impl Kitchen {
        pub fn duel_sink(num_plates: i32) -> Kitchen {
            Kitchen {
                plates: num_plates,
                sinks: 2,
            }
        }
    }
}

pub fn build_home() {
    let mut home = house::Kitchen::duel_sink(8);
    home.plates += 1;

    // Cannot read nor write to private struct field
    //home.sinks += 1;
    //println!("Num sinks: {}", home.sinks);
}
</code></pre>

        
            <!-- Topic header -->
            <h2 id="use"><a href="/learn/rust/crates/use">Use</a></h2>
            <!-- Include topic -->
            <p>The keyword <code>use</code> can be used to import code and to shorten absolute/relative paths. It is recommended to import the module and not the specific function so when used, it is obvious that the call is not to a local function. When importing anything other than a function (structs, enums, etc), use the full path.</p>

<p>Example:</p>

<pre class="rounded"><code class="rust">mod garden {
    // Nest a module inside of another
    pub mod food {
        // Add structs, enums, constants, traits, modules, functions, etc. here
        pub fn harvest() {}
        fn water() {}
    }

    pub mod soil {
        pub fn quality() {}
    
        pub fn amount() { quality(); }
    }
}

// Absolute path
use crate::garden::food;
// Relative path
use self::garden::soil;

// Full path for structs
use std::collections::HashMap;


fn main() {
    food::harvest();
    soil::quality();
	let mut map = HashMap::new();
}
</code></pre>

<h6>As</h6>
<p>When there is a name collision with <code>use</code>, the keyword <code>as</code> can be used in conjunction. Example:</p>

<pre class="rounded"><code class="rust">use std::fmt::Result;
use std::io::Result as IoResult;

fn func1() -&gt; Result { // ...  }
fn func2() -&gt; IoResult&lt;()&gt; { // ... }
</code></pre>

<h6>Pub Use</h6>
<p><code>pub use</code> can be used to re-export your code. For example, if you import A into B then import B into C, C would not have access to A because A would be private. If A was imported to B using <code>pub use</code>, then C would have access to A.</p>

<p>Re-exporting is especially useful when creating an API. Inside of <code>src/lib.rs</code>, you can do <code>pub use self::path::to::thing</code> to make others be able to use <code>thing</code> via <code>use my_crate::thing</code> in their code. This allows your API to be more strait-forward than your internal structure.</p>

<h6>Nested Paths</h6>
<p>Example:</p>
<pre class="rounded"><code class="rust">use std::{cmp::Ordering, io}; // Bring in both std::cmp::Ordering and std::io
use std::io::{self, Write}; // std::io and std::io::Write</code></pre>

<h6>Glob</h6>
<p>Brings in all public items from a path into scope. Example:</p>
<pre class="rounded"><code class="rust">use std::collections::*;</code></pre>



        
            <!-- Topic header -->
            <h2 id="workspaces"><a href="/learn/rust/crates/workspaces">Workspaces</a></h2>
            <!-- Include topic -->
            <p>A workspace is a set of packages that work together. To make a workspace, create a directory with a <code>Cargo.toml</code> file with a <code>[workspace]</code> section. You can then add packages to this workspace via <code>cargo new</code> and adding the name of the crate to the <code>workspace</code> section.</p>

        
    </div>
</div>

        </div>
    </div>

    <!-- Footer -->
    <footer class="small text-center text-muted">
        <!-- Social Links -->
		<p>
            <a href="https://github.com/DaltonCole" target="_blank" class="fa fa-github" style="font-size:28px;color:black;"></a>
            &nbsp;&nbsp;&nbsp;&nbsp;
            <a href="https://www.linkedin.com/in/daltoncole1/" target="_blank" class="fa fa-linkedin" style="font-size:28px;color:#2867B2;"></a>
        </p>

        <!-- Copyright -->
        
        <p class="copyright"> Copyright &copy; 2020 
            -2024 
         | Dalton Russell Cole</p>

        <!-- Extra Footer Block -->
        
        
    </footer>
</body>
</html>
